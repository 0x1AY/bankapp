{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://cursorworkshopserver.onrender.com';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API service functions\nexport const bankAPI = {\n  // Get API information\n  getAPIInfo: async () => {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch API information');\n    }\n  },\n  // Get all accounts\n  getAccounts: async () => {\n    try {\n      const response = await api.get('/api/accounts');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch accounts');\n    }\n  },\n  // Get account balance\n  getAccountBalance: async accountId => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/balance`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account balance');\n    }\n  },\n  // Get all transactions\n  getTransactions: async () => {\n    try {\n      const response = await api.get('/api/transactions');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch transactions');\n    }\n  },\n  // Transfer money\n  transferMoney: async transferData => {\n    try {\n      const response = await api.post('/api/transfer', transferData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Transfer failed');\n    }\n  },\n  // Freeze account\n  freezeAccount: async accountId => {\n    try {\n      const response = await api.post(`/api/accounts/${accountId}/freeze`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to freeze account');\n    }\n  },\n  // Unfreeze account\n  unfreezeAccount: async accountId => {\n    try {\n      const response = await api.post(`/api/accounts/${accountId}/unfreeze`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to unfreeze account');\n    }\n  },\n  // Get account interest\n  getAccountInterest: async accountId => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/interest`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account interest');\n    }\n  },\n  // Get account statement\n  getAccountStatement: async accountId => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/statement`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account statement');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","bankAPI","getAPIInfo","response","get","data","error","Error","getAccounts","getAccountBalance","accountId","getTransactions","transferMoney","transferData","post","freezeAccount","unfreezeAccount","getAccountInterest","getAccountStatement"],"sources":["/Users/ay/Documents/projects/cursor/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://cursorworkshopserver.onrender.com';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// API service functions\nexport const bankAPI = {\n  // Get API information\n  getAPIInfo: async () => {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch API information');\n    }\n  },\n\n  // Get all accounts\n  getAccounts: async () => {\n    try {\n      const response = await api.get('/api/accounts');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch accounts');\n    }\n  },\n\n  // Get account balance\n  getAccountBalance: async (accountId) => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/balance`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account balance');\n    }\n  },\n\n  // Get all transactions\n  getTransactions: async () => {\n    try {\n      const response = await api.get('/api/transactions');\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch transactions');\n    }\n  },\n\n  // Transfer money\n  transferMoney: async (transferData) => {\n    try {\n      const response = await api.post('/api/transfer', transferData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Transfer failed');\n    }\n  },\n\n  // Freeze account\n  freezeAccount: async (accountId) => {\n    try {\n      const response = await api.post(`/api/accounts/${accountId}/freeze`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to freeze account');\n    }\n  },\n\n  // Unfreeze account\n  unfreezeAccount: async (accountId) => {\n    try {\n      const response = await api.post(`/api/accounts/${accountId}/unfreeze`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to unfreeze account');\n    }\n  },\n\n  // Get account interest\n  getAccountInterest: async (accountId) => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/interest`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account interest');\n    }\n  },\n\n  // Get account statement\n  getAccountStatement: async (accountId) => {\n    try {\n      const response = await api.get(`/api/accounts/${accountId}/statement`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to fetch account statement');\n    }\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}